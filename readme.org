#+TITLE: slack-search
#+AUTHOR: Ag Ibragimov
#+DATE: 2025
[[https://github.com/agzam/slack-search.el/actions/workflows/run-tests.yml][https://github.com/agzam/slack-search.el/actions/workflows/run-tests.yml/badge.svg]]

Search Slack messages from Emacs and view results in org-mode buffer.

[[file:./test/preview.gif]]

Status: fresh out of oven - very experimental, expect weirdness!

* Why?

Slack's interface makes it frustratingly difficult to quickly find and extract plain text from messages. Want to grab a code snippet someone shared three weeks ago? Good luck copying it cleanly from the Slack UI. Need to search through old conversations and collect information? You'll be clicking through endless threads and fighting with Slack's formatting.

This package solves that problem by bringing Slack search into Emacs, where you can:
- Search messages like you search anything else in Emacs
- Get results as nicely formatted org-mode documents
- Click links to jump directly to messages in the Slack app
- Copy text without wrestling with Slack's UI quirks

* What?

~slack-search~ lets you search Slack messages and displays results in an org-mode buffer. Each result includes:

- Clickable author names, channel names, and timestamps
- Message content with proper formatting:
  - Code blocks converted to org src blocks
  - Inline code preserved as org verbatim
  - Links converted to org link format
  - Bold/italic formatting maintained

The package automatically handles:
- Different conversation types (channels, DMs, group DMs, private channels)
- Pagination (loads more results automatically as you scroll)
- Slack's custom mrkdwn format conversion to org-mode

* How?

** Getting Slack credentials

Slack doesn't make it easy to search via API without explicit API access and going through their OAuth dance. But why would that ever stop you - fearless Emacs warrior for software freedom?

You need two things:
1. Your Slack web session token (starts with ~xoxc-~)
2. Your ~d~ cookie value - (starts with ~xoxd-~)
   
You can get them from authenticated Slack instance in the web app.
Once you have them, you can store them in an encrypted ~netrc~ format file like this, 

#+begin_src
machine MYORG.slack.com login token password xoxd-your-token-here
machine MYORG.slack.com login cookie password d-cookie-value-here
#+end_src

or put them in an env var, or plain text file - stick them wherever you like, I'm not your uncle - I won't judge.

For easy way to get these two, I wrote this automation script [[https://github.com/agzam/lazy-token-catcher][lazy-token-catcher]].

** Configuration

You need to tell ~slack-search~ how to access session token and 'd-cookie', they set in ~slack-search-token-function~ and ~slack-search-cookie-function~

Here's how you can grab them from a given netrc-format encrypted file:

#+begin_src emacs-lisp
(defun slack-search-creds-fn (kind)
  (let ((auth-sources `(,(expand-file-name "~/.doom.d/.secrets.gpg"))))
    (auth-source-pick-first-password :host "MYORG.slack.com" :user kind)))

(setq slack-search-token-function
      (lambda () (slack-search-creds-fn "token")))

(setq slack-search-cookie-function
      (lambda () (slack-search-creds-fn "cookie")))
#+end_src

** Multiple Slack workspaces

The Slack session token encodes which Slack org it belongs to, so if you want to use the package with multiple Slack workspaces, you'll need to switch credentials before searching. You could wrap the search command to set these dynamically, e.g., 

#+begin_src emacs-lisp
(defun my-slack-search-org1 ()
  (interactive)
  (setq slack-search-token-function (lambda () (get-token-for "org1.slack.com")))
  (setq slack-search-cookie-function (lambda () (get-cookie-for "org1.slack.com")))
  (call-interactively #'slack-search))

(defun my-slack-search-org2 ()
  (interactive)
  (setq slack-search-token-function (lambda () (get-token-for "org2.slack.com")))
  (setq slack-search-cookie-function (lambda () (get-cookie-for "org2.slack.com")))
  (call-interactively #'slack-search))
#+end_src

** Usage

Once token and cookie retrieval configured, just run:

#+begin_src emacs-lisp
M-x slack-search
#+end_src

** Optional: Customize browser tab behavior

Slack notoriously (and quite stupidly) doesn't allow deep-linking directly to a given message - only channels and threads. In practice, this means whenever you click a Slack permalink outside of the app, it first opens it in the browser, only then navigates to the app, leaving useless "you can close this now" tab, which can be quite annoying.

On mac, the package automatically closes that useless redirect tab. If you want to disable that:

#+begin_src emacs-lisp
(setq slack-search-inhibit-redirect-browser-tab nil)
#+end_src

You can also customize which browser it targets and the delay before closing the tab:

#+begin_src emacs-lisp
(setq slack-search-browser-name "Google Chrome")  ; or "Safari", etc.
(setq slack-search-close-tab-delay 2.0)           ; seconds
#+end_src

* License

Copyright Â© 2025 Ag Ibragimov

This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program. If not, see [[https://www.gnu.org/licenses/]].
